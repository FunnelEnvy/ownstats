service:
  name: ownstats

plugins:
  - serverless-pseudo-parameters
  - serverless-stack-output
  - serverless-s3-sync
  - serverless-cloudfront-invalidate

custom:

  # Output plugin configuration
  output:
    handler: modules/renderScript.handler

  # S3 buckets
  s3:
    buckets:
      logs: ${self:service.name}-logs
      distribution: ${self:service.name}

  # Glue database name
  glue:
    database: ownstats
    tables:
      raw: access_logs_raw
      optimized: page_views
      edgeLocations: edge_locations

  # SNS
  sns:
    topicName: '${self:custom.s3.buckets.logs}-notifications'

  # Prefixes
  prefixes:
    incoming: incoming/
    partitionedGz: partitioned-gz/
    partitionedParquet: partitioned-parquet/
    athenaQueryResults: athena-query-results/
    edgeLocations: edge-locations/

  # For caching with CloudFront in general, see
  # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html#ExpirationDownloadDist

  # CloudFront invalidation plugin configuration
  cloudfrontInvalidate:
    distributionIdKey: 'CloudFrontDistributionId'
    items: # Add your files to invalidate here:
      - '/hello.js'

  # S3 sync plugin configuration
  s3Sync:
    - bucketName: ${self:custom.s3.buckets.distribution}
      localDir: src
      params:
        - hello.js:
            ContentType: 'application/javascript'
            ContentEncoding: 'gzip'
        - hello.gif:
            ContentType: 'image/gif'
            ContentEncoding: 'gzip'
            CacheControl: 'no-cache, no-store, must-revalidate'
            Expires: '1990-01-01T00:00:00.000Z'
    - bucketName: ${self:custom.s3.buckets.logs}
      localDir: data
      bucketPrefix: ${self:custom.prefixes.edgeLocations}

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - athena:StartQueryExecution
        - athena:GetQueryExecution
      Resource: '*'
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:GetBucketLocation
        - s3:GetBucketNotification
        - s3:PutBucketNotification
      Resource: 'arn:aws:s3:::${self:custom.s3.buckets.logs}'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource: 'arn:aws:s3:::${self:custom.s3.buckets.logs}/*'
    - Effect: Allow
      Action:
        - glue:CreatePartition
        - glue:GetDatabase
        - glue:GetTable
        - glue:BatchCreatePartition
        - glue:GetPartition
        - glue:GetPartitions
        - glue:CreateTable
        - glue:DeleteTable
        - glue:DeletePartition
      Resource: '*'

functions:
  transformPartition:
    handler: functions/transformPartition.handler
    description: 'Transform Athena partitions'
    memorySize: 256
    timeout: 900
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
      SOURCE_TABLE: '#{PartitionedGzTable}'
      TARGET_TABLE: '#{PartitionedParquetTable}'
      DATABASE: '#{AccessLogsDatabase}'
      ATHENA_QUERY_RESULTS_LOCATION: 's3://#{LogBucket}/${self:custom.prefixes.athenaQueryResults}'
      ATHENA_CTAS_RESULTS_LOCATION: 's3://#{LogBucket}/${self:custom.prefixes.partitionedParquet}'
      S3_BUCKET: '#{LogBucket}'
      S3_PREFIX: '${self:custom.prefixes.partitionedGz}'
      LOG_LEVEL: debug
    events:
      - schedule: cron(1 * * * ? *)
  createPartition:
    handler: functions/createPartition.handler
    description: 'Create Athena partitions'
    memorySize: 256
    timeout: 120
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
      TABLE: '#{PartitionedGzTable}'
      DATABASE: '#{AccessLogsDatabase}'
      ATHENA_QUERY_RESULTS_LOCATION: 's3://#{LogBucket}/${self:custom.prefixes.athenaQueryResults}'
      LOG_LEVEL: debug
    events:
      - schedule: cron(55 * * * ? *)
  moveAccessLogs:
    handler: functions/moveAccessLogs.handler
    description: 'Move incoming files to partitioned prefix structure'
    memorySize: 256
    timeout: 300
    environment:
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
      TARGET_KEY_PREFIX: '${self:custom.prefixes.partitionedGz}'
      LOG_LEVEL: debug
    events:
      - sns: 
          arn: !Ref BucketNotifications
          topicName: ${self:custom.sns.topicName}

package:
  include:
    - function/**
  exclude:
    - resources/**
    - modules/**
    - queries/**
    - src/**
    - .gitignore
    - LICENSE
    - package.json
    - package-lock.json
    - README.md

resources:

  - ${file(resources/cloudfront-origin-access-identity.yml)}
  - ${file(resources/sns-topic.yml)}
  - ${file(resources/s3-buckets.yml)}
  - ${file(resources/s3-policies.yml)}
  - ${file(resources/cf-distribution.yml)}
  - ${file(resources/glue-db.yml)}
  - ${file(resources/glue-table-partitioned-gz.yml)}
  - ${file(resources/glue-table-partitioned-parquet.yml)}
  - ${file(resources/glue-table-edge-locations.yml)}
  - ${file(resources/outputs.yml)}
